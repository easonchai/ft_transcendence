// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
	ONLINE
	OFFLINE
	IN_GAME
}

// --- NextAuth Prisma Schema ---

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    			@id @default(cuid())
  name          String?
  email         String?   			@unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
	// --- Added for transcendence ---
	displayname		String					@unique
	status				UserStatus			@default(OFFLINE)
	createdAt			DateTime				@default(now())
	updatedAt			DateTime				@updatedAt
	matches				UserMatch[]
	blockers			UserBlocks[]		@relation("blocker")
	blockedby			UserBlocks[]		@relation("blockedby")
	friends				UserFriends[]		@relation("friend")
	friendOf			UserFriends[]		@relation("friendOf")
	senders				UserMessages[]	@relation("sender")
	receivers			UserMessages[]	@relation("receiver")
	// -------------
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- transcendence schema --- 

model Match {
	id						Int				@id	@default(autoincrement())
	createdAt			DateTime	@default(now())
	updatedAt			DateTime	@updatedAt
	users					UserMatch[]
}

model UserMatch {
	score			Int
	
	match_id	Int			
	match			Match			@relation(fields: [match_id], references: [id], onDelete: Cascade) 
	user_id		String
	user			User			@relation(fields: [user_id], references: [id], onDelete: Cascade)
	
	@@id([match_id, user_id])
}

model UserBlocks {
	blocker_id	String
	blocker			User		@relation("blocker", fields: [blocker_id], references: [id])
	blocked_id	String
	blocked			User		@relation("blockedby", fields: [blocked_id], references: [id])
	
	@@id([blocker_id, blocked_id])
}

model UserFriends {
	user_id		String
	user			User			@relation("friend", fields: [user_id], references: [id])
	friend_id	String
	friend		User			@relation("friendOf", fields: [friend_id], references: [id])
	
	@@id([user_id, friend_id])
}

model UserMessages {
	message			String		@db.Text
	
	sender_id		String		
	sender			User			@relation("sender", fields: [sender_id], references: [id])
	receiver_id	String	
	receiver		User			@relation("receiver", fields: [receiver_id], references: [id])
	
	@@id([sender_id, receiver_id])
}


